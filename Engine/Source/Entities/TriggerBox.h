#pragma once

#include "Entity.h"
#include "Assets/TriggerBoxData.h"
#include "Collision/Result.h"
#include "EventSystem.h"
#include <unordered_set>

namespace Imzadi
{
	/**
	 * These are collision shapes only (and so do not render anything) but they
	 * do trigger events when some other entity enters or leaves the shape's volume.
	 */
	class IMZADI_API TriggerBox : public Entity
	{
	public:
		TriggerBox();
		virtual ~TriggerBox();

		virtual bool Setup() override;
		virtual bool Shutdown() override;
		virtual bool Tick(TickPass tickPass, double deltaTime) override;

		void SetData(TriggerBoxData* data) { this->data.Set(data); }

		void SetEventChannelFlags(uint64_t channelFlags) { this->channelFlags = channelFlags; }
		uint64_t GetEventChannelFlags() const { return this->channelFlags; }

	protected:
		void UpdateCollisionState(CollisionQueryResult* collisionResult);

		ShapeID collisionShapeID;
		TaskID collisionQueryTaskID;
		Reference<TriggerBoxData> data;
		std::unordered_set<ShapeID> shapeSet;
		uint64_t channelFlags;
	};

	/**
	 * These are the events generated by the trigger box.
	 */
	class IMZADI_API TriggerBoxEvent : public Event
	{
	public:
		enum Type
		{
			SHAPE_ENTERED,
			SHAPE_EXITED
		};

		TriggerBoxEvent(Type type, ShapeID shapeID, const std::string& triggerBoxName)
		{
			this->type = type;
			this->shapeID = shapeID;
			this->name = triggerBoxName;
		}

		virtual ~TriggerBoxEvent()
		{
		}

	public:
		Type type;			///< Did the shape leave or enter the box?
		ShapeID shapeID;	///< This is the shape ID of the collision shape that entered or exited the trigger box.
	};
}